<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NEXTICK</title>
    <link rel="stylesheet" href="/admin/editproducts.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
    <link rel="shortcut icon" type="image/png" href="/assets/img/favicon.png">

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .button-group {
            text-align: center;
            margin-top: 20px;
        }

        .button-group button {
            padding: 10px 15px;
            background: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .button-group button:hover {
            background: #0056b3;
        }

        .image-previews {
            display: flex;
            flex-direction: column;
            /* Column for better vertical alignment */
            margin-top: 20px;
        }

        .image-preview {
            position: relative;
            margin-bottom: 15px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            overflow: hidden;
            text-align: center;
            /* Centering text and button */
        }

        .image-preview img {
            width: 100%;
            height: auto;
        }

        .crop-button {
            position: relative;
            bottom: 5px;
            padding: 8px 12px;
            background: #28a745;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s ease;
            margin-top: 5px;
            /* Space above the button */
        }

        .crop-button:hover {
            background: #218838;
        }

        .instructions {
            margin-top: 20px;
            font-size: 0.9em;
            color: #666;
            text-align: center;
            /* Center the instructions */
        }
    </style>
</head>
  

<body style="background-color: rgba(0, 12, 48, 0.91);">
    <div class="container">
        <h1>Add New Product</h1>
        <form action="/admin/addproducts" method="post" enctype="multipart/form-data" id="addProductForm">
  <div id="global-messages" style="color: red; font-size: 17px; font-weight: bold;">{{message}}</div>

  <div class="form-group">
    <label for="name">Product Name</label>
    <input type="text" id="name" name="name" />
    <span id="name-error" class="error-message" style="color: red; font-size: 14px;"></span>
  </div>

  <div class="form-group">
    <label for="category">Category</label>
    <select id="category" name="category" style="height: 40px; border-radius: 7px;" class="form-select">
      <option value="" disabled selected>Select a category</option>
      {{#each categories}}
      <option value="{{this.category}}">{{this.category}}</option>
      {{/each}}
    </select>
    <span id="category-error" class="error-message" style="color: red; font-size: 14px;"></span>
  </div>

  <div class="form-group">
    <label for="description">Description</label>
    <input type="text" id="description" name="description" />
    <span id="description-error" class="error-message" style="color: red; font-size: 14px;"></span>
  </div>

  <div class="form-group">
    <label for="stock">Stock</label>
    <input type="number" id="stock" name="stock" />
    <span id="stock-error" class="error-message" style="color: red; font-size: 14px;"></span>
  </div>

  <div class="form-group">
    <label for="price">Price</label>
    <input type="number" id="price" name="price" />
    <span id="price-error" class="error-message" style="color: red; font-size: 14px;"></span>
  </div>

  <div class="form-group">
    <label for="images">Upload Images (minimum 3)</label>
    <input type="file" id="images" name="images" accept="image/*" multiple />
    <span id="images-error" class="error-message" style="color: red; font-size: 14px;"></span>
  </div>

  <div style="display: flex;">
    <div class="button-group">
      <a href="/admin/products"><button style="background-color: rgb(255, 43, 43);" type="button">Back</button></a>
    </div>
    <div style="margin-left: 73%;" class="button-group">
      <button style="background-color: rgb(23, 184, 23);" type="submit">Add Product</button>
    </div>
  </div>
</form>
<script>document.getElementById("addProductForm").addEventListener("submit", function (event) {
  let isValid = true;

  // Clear existing error messages
  document.querySelectorAll(".error-message").forEach((el) => (el.textContent = ""));

  // Get field values
  const name = document.getElementById("name").value.trim();
  const category = document.getElementById("category").value;
  const description = document.getElementById("description").value.trim();
  const stock = document.getElementById("stock").value.trim();
  const price = document.getElementById("price").value.trim();
  const images = document.getElementById("images").files;

  // Validate Product Name
  if (!name) {
    isValid = false;
    document.getElementById("name-error").textContent = "Product name is required.";
  }

  // Validate Category
  if (!category) {
    isValid = false;
    document.getElementById("category-error").textContent = "Please select a category.";
  }

  // Validate Description
  if (!description) {
    isValid = false;
    document.getElementById("description-error").textContent = "Description is required.";
  }

  // Validate Stock
  if (!stock || isNaN(stock) || stock <= 0) {
    isValid = false;
    document.getElementById("stock-error").textContent = "Stock must be a positive number.";
  }

  // Validate Price
  if (!price || isNaN(price) || price <= 0) {
    isValid = false;
    document.getElementById("price-error").textContent = "Price must be a positive number.";
  }

  // Validate Images
  if (images.length < 3) {
    isValid = false;
    document.getElementById("images-error").textContent = "Please upload at least 3 images.";
  } else {
    // Validate image types
    const validImageTypes = ["image/jpeg", "image/png", "image/jpg", "image/gif"];
    for (let i = 0; i < images.length; i++) {
      if (!validImageTypes.includes(images[i].type)) {
        isValid = false;
        document.getElementById("images-error").textContent =
          "Invalid file type. Please upload only images.";
        break;
      }
    }
  }

  // Prevent form submission if validation fails
  if (!isValid) {
    event.preventDefault();
  }
});
</script>

        <div class="image-previews"></div>
        <div class="instructions">
            <p>Crop the uploaded images. You can crop multiple times, but only the latest cropped image will be
                displayed.</p>
        </div>

    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        const imagesInput = document.getElementById('images');
        const previewsContainer = document.querySelector('.image-previews');
        let cropper;

        imagesInput.addEventListener('change', function (e) {
            const files = e.target.files;
            previewsContainer.innerHTML = ''; 

            if (cropper) {
                cropper.destroy();  
            }

            Array.from(files).forEach(file => {
                const reader = new FileReader();
                reader.onload = function (event) {
                    const imgElement = document.createElement('img');
                    imgElement.src = event.target.result;

                  
                    const previewContainer = document.createElement('div');
                    previewContainer.className = 'image-preview';
                    previewsContainer.appendChild(previewContainer);
                    previewContainer.appendChild(imgElement);
                    
                    cropper = new Cropper(imgElement, {
                        aspectRatio: 1,
                        viewMode: 1,
                        autoCropArea: 1,
                        ready: function () {
                            const cropButton = document.createElement('button');
                            cropButton.textContent = 'Crop Image';
                            cropButton.className = 'crop-button';
                            previewContainer.appendChild(cropButton);

                            cropButton.addEventListener('click', async () => {
                                  const existingPreview = previewsContainer.querySelector('.cropped-image');
                                if (existingPreview) {
                                    existingPreview.remove();
                                }

                                const canvas = cropper.getCroppedCanvas({
                                    width: 300,  
                                    height: 300  
                                });

                           
                                canvas.toBlob(async (blob) => {
                                    const newFile = new File([blob], file.name, {
                                        type: file.type,
                                        lastModified: Date.now()
                                    });
                                    const newReader = new FileReader();
                                    newReader.onload = function (newEvent) {
                                        const imgPreview = document.createElement('img');
                                        imgPreview.src = newEvent.target.result;
                                        imgPreview.className = 'cropped-image'; 
                                        imgPreview.style.width = '100%';  
                                        imgPreview.style.height = '100px'; 
                                        previewContainer.appendChild(imgPreview);
                                    };

                                    newReader.readAsDataURL(newFile);
                                }, file.type);
                            });
                        }
                    });
                };

                reader.readAsDataURL(file);
            });
        });
    </script>
  <script>
         setTimeout(() => {
            const messageField = document.getElementById('global-messages');
            if (messageField) {
                messageField.value = '';              }
        }, 2000); 
    </script>
</body>

</html>