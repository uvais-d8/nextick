<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WATCHES PREMIUM</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/admin/products.css">
    <link rel="shortcut icon" type="image/png" href="/assets/img/favicon.png">

</head>

<body>
    <div class="dashboard">
        <aside class="sidebar">
            <div class="logo">WATCH PREMIUM</div>
            <nav>
                <a class="a" href="/admin/dashboard">
                    <div class="nav-item">Dashboard</div>
                </a>
                <a class="a" href="/admin/userpage">
                    <div class="nav-item">Users</div>
                    <a class="a" href="/admin/products">
                        <div class="nav-item active">Products</div>
                    </a>
                    <a class="a" href="/admin/category">
                        <div class="nav-item">Category</div>
                    </a>
                    <a class="a" href="/admin/orders">
                        <div class="nav-item">Orders</div>
                    </a>
                    <a class="a" href="/admin/inventory">
                        <div class="nav-item">Inventory</div>
                    </a>
                    <a class="a" href="/admin/coupon">
                        <div class="nav-item">coupons</div>
                    </a>
                    <a class="a" href="/admin/dashboard">
                        <div class="nav-item">Offers</div>
                    </a>
                    <a class="a" href="/admin/dashboard">
                        <div class="nav-item">Sales Report</div>
                    </a>
            </nav>
        </aside>
        <main class="main-content">
            <div class="controls">
                <h1 style="font-size:43px;">PRODUCTS MANAGEMENT</h1>
                <a href="/admin/addproduct"><button style="background-color: rgba(17, 65, 108, 0.861);"
                        class="add-products">ADD
                        PRODUCTS</button></a>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Stock</th>
                        <th>Price</th>
                        <th>edit</th>
                        <th>action</th>
                    </tr>
                    <tr>
                        <input type="text"
                            style="border-width: 0px; color:red; width:100%; background-color:rgba(12, 14, 20, 0.976)"
                            name="message" id="message" value="{{message}}" readonly>

                    </tr>
                </thead>
                <script>
                    // Wait for 2 seconds and then clear the message
                    setTimeout(function () {
                        document.getElementById('message').value = ''; // Clear the message
                    }, 10000); // 2000 milliseconds = 2 seconds
                </script>
                <tbody>
                    {{#each products}}
                    <tr>
                        <td><img src="/{{this.images.[0]}}" alt="{{this.name}}" style="width: 100px; height: 100px;">
                        </td>
                        <td>{{this.name}}</td>
                        <td>{{this.category.category}}</td>
                        <td>{{this.stock}}</td>
                        <td>{{this.price}}</td>
                        <td>
<button type="button" class="btn btn-warning"
    onclick="showEditProduct('{{this._id}}', '{{this.name}}', '{{this.category._id}}', {{this.stock}}, {{this.price}}, {{json this.images}})">
    EDIT
</button>



                        </td>
                        <td>
                            {{#if this.islisted}}
                            <form action="/admin/products/unlist/{{this._id}}" method="POST">
                                <button
                                    style="color:white;background-color: rgba(0, 174, 0, 0.671);height:40px;width:100px"
                                    class="action-button unblock-button">
                                    LISTED
                                </button>
                            </form>
                            {{else}}
                            <form action="/admin/products/list/{{this._id}}" method="POST">
                                <button style="color:white;background-color: rgba(255, 0, 0, 0.622);height:40px"
                                    class="action-button block-button">
                                    UNLISTED
                                </button>
                            </form>
                            {{/if}}
                        </td>

                    </tr>
                    {{/each}}
                </tbody>

            </table>
            <div style="margin-left: 44%;" class="pagination">
                <button style="color:white;background-color: rgb(10, 15, 27);" class="pagination-button">&lt;</button>
                <span style="margin-top: 8px;">swipe</span>
                <button style="color:white;background-color: rgb(10, 15, 27);" class="pagination-button">&gt;</button>
            </div>
        </main>
    </div>

    <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm" action="/admin/editproducts" method="POST" enctype="multipart/form-data">
                        <input type="hidden" id="productId" name="id">
                        <div class="mb-3">
                            <label for="name" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="name" name="name" required>
                        </div>
                       <div class="form-group">
                            <label for="category">Category</label>
                            <select style="height: 40px; border-radius: 7px;" class="form-select" id="category"
                                name="category" required>
                                <option value="" disabled selected>Select a category</option>
                                {{#each categories}}
                                <option style="height: 40px; border-radius: 7px;" value="{{this._id}}">{{this.category}}
                                </option>
                                {{/each}}
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="stock" class="form-label">Stock</label>
                            <input type="number" class="form-control" id="stock" name="stock" required>
                        </div>
                        <div class="mb-3">
                            <label for="price" class="form-label">Price</label>
                            <input type="number" class="form-control" id="price" name="price" step="0.01" required>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Images (Max 3)</label>
                            <div id="imageContainer" class="row"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Cropper Modal -->
    <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div>
                        <img id="imageToCrop" src="" alt="Image to crop" style="max-width: 100%;">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="cropImageBtn">Crop</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        let editProductModal;
        let cropperModal;
        let cropper;
        let currentImageInput;
        let currentImageIndex;
        let deletedImages = []; // To track deleted images

        document.addEventListener('DOMContentLoaded', function () {
            editProductModal = new bootstrap.Modal(document.getElementById('editProductModal'));
            cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));

            document.getElementById('editProductForm').addEventListener('submit', async function (e) {
                e.preventDefault();

                const formData = new FormData(this);

                // Append deleted images to the form data
                if (deletedImages.length > 0) {
                    formData.append('deletedImages', deletedImages.join(','));
                }

                try {
                    const response = await fetch('/admin/editproducts', {
                        method: 'POST',
                        body: formData,
                    });

                    if (response.ok) {
                        console.log('Product updated successfully');
                        window.location.reload();
                    } else {
                        console.error('Failed to update product');
                    }
                } catch (error) {
                    console.error('Error submitting form:', error);
                }
            });

            document.getElementById('cropImageBtn').addEventListener('click', function () {
                if (cropper) {
                    cropper.getCroppedCanvas({
                        width: 300,
                        height: 300,
                    }).toBlob((blob) => {
                        const url = URL.createObjectURL(blob);
                        const fileName = `cropped_image_${Date.now()}.png`;
                        const file = new File([blob], fileName, { type: 'image/png' });

                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(file);
                        currentImageInput.files = dataTransfer.files;

                        const img = document.querySelector(`.product-image[data-index="${currentImageIndex}"]`);
                        img.src = url;

                        // Add cropped image as Base64 to the form
                        const base64String = cropper.getCroppedCanvas().toDataURL('image/png');
                        const croppedDataInput = document.createElement('input');
                        croppedDataInput.type = 'hidden';
                        croppedDataInput.name = 'croppedImageData[]';
                        croppedDataInput.value = base64String;
                        document.getElementById('editProductForm').appendChild(croppedDataInput);

                        cropperModal.hide();
                    });
                }
            });
        });

        function showEditProduct(id, name, category, stock, price, images) {
            document.getElementById('productId').value = id;
            document.getElementById('name').value = name;
            document.getElementById('category').value = category;
            document.getElementById('stock').value = stock;
            document.getElementById('price').value = price;

            const imageContainer = document.getElementById('imageContainer');
            imageContainer.innerHTML = '';
            images.forEach((image, index) => {
                const imageHtml = `
            <div class="col-md-4 mb-3">
                <div class="card">
                    <img src="../${image}" class="card-img-top product-image" name="images" alt="Product image" data-index="${index}">
                    <div class="card-body">
                        <input type="file" class="form-control image-input" name="images[]" accept="image/*" data-index="${index}">
                        <button type="button" class="btn btn-primary btn-sm mt-2 crop-button" data-index="${index}">Crop</button>
                        <button type="button" class="btn btn-danger btn-sm mt-2 delete-button" data-path="${image}" data-index="${index}">Delete</button>
                    </div>
                </div>
            </div>
        `;
                imageContainer.insertAdjacentHTML('beforeend', imageHtml);
            });

            document.querySelectorAll('.image-input').forEach((input, index) => {
                input.addEventListener('change', function (event) {
                    const file = event.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const img = document.querySelector(`.product-image[data-index="${index}"]`);
                            img.src = e.target.result;
                        };
                        reader.readAsDataURL(file);
                    }
                });
            });

            document.querySelectorAll('.crop-button').forEach((button, index) => {
                button.addEventListener('click', function () {
                    const input = document.querySelector(`.image-input[data-index="${index}"]`);
                    if (input.files && input.files[0]) {
                        currentImageInput = input;
                        currentImageIndex = index;
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const image = document.getElementById('imageToCrop');
                            image.src = e.target.result;
                            if (cropper) {
                                cropper.destroy();
                            }
                            cropper = new Cropper(image, {
                                aspectRatio: 1,
                                viewMode: 1,
                            });
                            cropperModal.show();
                        };
                        reader.readAsDataURL(input.files[0]);
                    }
                });
            });

            document.querySelectorAll('.delete-button').forEach((button) => {
                button.addEventListener('click', function () {
                    const imagePath = button.getAttribute('data-path');
                    deletedImages.push(imagePath); // Track deleted images

                    const card = button.closest('.col-md-4');
                    card.remove(); // Remove image card from the UI
                });
            });

            editProductModal.show();
        }

    </script>
</body>

</html>