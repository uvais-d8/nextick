<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WATCHES PREMIUM</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/admin/products.css">
    <link rel="shortcut icon" type="image/png" href="/assets/img/favicon.png">

</head>

<body>
    <div class="dashboard">
        <aside class="sidebar">
            <div class="logo">WATCH PREMIUM</div>
            <nav>
                <a class="a" href="/admin/dashboard">
                    <div class="nav-item">Dashboard</div>
                </a>
                <a class="a" href="/admin/userpage">
                    <div class="nav-item">Users</div>
                    <a class="a" href="/admin/products">
                        <div class="nav-item active">Products</div>
                    </a>
                    <a class="a" href="/admin/category">
                        <div class="nav-item">Category</div>
                    </a>
                    <a class="a" href="/admin/orders">
                        <div class="nav-item">Orders</div>
                    </a>
                    <a class="a" href="/admin/inventory">
                        <div class="nav-item">Inventory</div>
                    </a>
                    <a class="a" href="/admin/coupon">
                        <div class="nav-item">coupons</div>
                    </a>
                    <a class="a" href="/admin/dashboard">
                        <div class="nav-item">Offers</div>
                    </a>
                    <a class="a" href="/admin/dashboard">
                        <div class="nav-item">Sales Report</div>
                    </a>
            </nav>
        </aside>
        <main class="main-content">
            <div class="controls">
                <h1 style="font-size:43px;">PRODUCTS MANAGEMENT</h1>
                <a href="/admin/addproduct"><button style="background-color: rgba(17, 65, 108, 0.861);"
                        class="add-products">ADD
                        PRODUCTS</button></a>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Stock</th>
                        <th>Price</th>
                        <th>edit</th>
                        <th>action</th>
                    </tr>
                    <tr>
                        <input type="text"
                            style="border-width: 0px; color:red;font-weight:bold;width:100%;background-color:rgba(14, 14, 28, 0.976)"
                            name="message" id="message" value="{{message}}" readonly>
                    </tr>
                </thead>
                <script>
                    // Wait for 2 seconds and then clear the message
                    setTimeout(function () {
                        document.getElementById('message').value = ''; // Clear the message
                    }, 2000); // 2000 milliseconds = 2 seconds
                </script>
                <tbody>
                    {{#each products}}
                    <tr>
                        <td><img src="/{{this.images.[0]}}" alt="{{this.name}}" style="width: 100px; height: 100px;">
                        </td>
                        <td>{{this.name}}</td>
                        <td>{{this.category}}</=d>
                        <td>{{this.stock}}</td>
                        <td>{{this.price}}</td>
                        <td>
                            <button type="button" class="btn btn-"
                                style="height: 40px;BACKGROUND-COLOR:rgba(255, 166, 0, 0.875)" data-bs-toggle="modal"
                                data-bs-target="#editProductModal-{{_id}}">
                                EDIT
                            </button>

                        </td>
                        <td>
                            {{#if this.islisted}}
                            <form action="/admin/products/unlist/{{this._id}}" method="POST">
                                <button
                                    style="color:white;background-color: rgba(0, 174, 0, 0.671);height:40px;width:100px"
                                    class="action-button unblock-button">
                                    LISTED
                                </button>
                            </form>
                            {{else}}
                            <form action="/admin/products/list/{{this._id}}" method="POST">
                                <button style="color:white;background-color: rgba(255, 0, 0, 0.622);height:40px"
                                    class="action-button block-button">
                                    UNLISTED
                                </button>
                            </form>
                            {{/if}}
                        </td>

                    </tr>
                    {{/each}}
                </tbody>

            </table>
           <div style="margin-left: 44%;" class="pagination">
                <button style="color:white;background-color: rgb(10, 15, 27);" class="pagination-button">&lt;</button>
                <span style="margin-top: 8px;">swipe</span>
                <button style="color:white;background-color: rgb(10, 15, 27);" class="pagination-button">&gt;</button>
            </div>
        </main>
    </div>
 {{#each products}}
    <!-- Edit Product Modal -->
    <div class="modal fade" id="editProductModal-{{_id}}" tabindex="-1" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Edit Product</h5>

                    {{#if modalError}}
                    <div class="error-message">{{modalError}}</div>
                    {{/if}}

                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm-{{_id}}" action="/admin/editproducts/{{_id}}" method="POST"
                        enctype="multipart/form-data" class="p-4 border rounded">
                        <!-- Product Name -->
                        <div class="mb-3">
                            <label for="name" class="form-label">Product Name</label>
                            <input type="text" id="name" name="name" value="{{name}}" class="form-control" required>
                        </div>

                        <!-- Category -->
                        <div class="mb-3">
                            <label for="category" class="form-label">Category</label>
                            <input type="text" id="category" name="category" value="{{category}}" class="form-control"
                                required>
                        </div>

                        <!-- Stock -->
                        <div class="mb-3">
                            <label for="stock" class="form-label">Stock</label>
                            <input type="number" id="stock" name="stock" value="{{stock}}" class="form-control"
                                required>
                        </div>

                        <!-- Price -->
                        <div class="mb-3">
                            <label for="price" class="form-label">Price</label>
                            <input type="number" id="price" name="price" value="{{price}}" class="form-control"
                                required>
                        </div>


                        <input type="hidden" id="croppedImageData" name="croppedImageData" value="">

                        <!-- Existing Images -->
                        <div class="mb-3">
                            <h5>Existing Images</h5>
                            <div id="existingImages" class="d-flex flex-wrap gap-3">
                                {{#each images}}
                                <div class="position-relative" id="image-{{this}}">
                                    <img src="/{{this}}" alt="Product Image" class="img-thumbnail"
                                        style="width: 100px; height: auto;">
                                    <button type="button"
                                        class="btn btn-danger btn-sm position-absolute top-0 end-0 m-1 delete-image-btn"
                                        data-image="{{this}}">Delete</button>
                                </div>
                                {{/each}}
                            </div>
                        </div>

                        <div class="image-previews"></div>
                        <div class="instructions">
                            <p>Crop the uploaded images. You can crop multiple times, but only the latest cropped image
                                will be displayed.</p>
                        </div>
                </div>
                <div class="form-group">
                    <label for="images">Upload Images (minimum 3)</label>
                    <input type="file" id="images" name="images" accept="image/*" multiple>
                </div>

                <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
                <script>
                    const imagesInput = document.getElementById('images');
                    const previewsContainer = document.querySelector('.image-previews');
                    let cropper;

                    imagesInput.addEventListener('change', function (e) {
                        const files = e.target.files;
                        previewsContainer.innerHTML = ''; // Clear previous previews

                        if (cropper) {
                            cropper.destroy(); // Destroy previous cropper instance if it exists
                        }

                        Array.from(files).forEach(file => {
                            const reader = new FileReader();
                            reader.onload = function (event) {
                                const imgElement = document.createElement('img');
                                imgElement.src = event.target.result;

                                // Create a wrapper for the preview
                                const previewContainer = document.createElement('div');
                                previewContainer.className = 'image-preview';
                                previewsContainer.appendChild(previewContainer);
                                previewContainer.appendChild(imgElement);

                                // Create a cropper instance
                                cropper = new Cropper(imgElement, {
                                    aspectRatio: 1, // Adjust the aspect ratio as needed
                                    viewMode: 1,
                                    autoCropArea: 1,
                                    ready: function () {
                                        // Create crop button
                                        const cropButton = document.createElement('button');
                                        cropButton.id = 'cropImageBtn';
                                        cropButton.textContent = 'Crop Image';
                                        cropButton.className = 'crop-button';

                                        previewContainer.appendChild(cropButton);

                                        cropButton.addEventListener('click', async (event) => {
                                            event.preventDefault(); // Prevent form submission or modal close

                                            // Remove previous cropped image if exists
                                            const existingPreview = previewsContainer.querySelector('.cropped-image');
                                            if (existingPreview) {
                                                existingPreview.remove();
                                            }

                                            const canvas = cropper.getCroppedCanvas({
                                                width: 300, // Set desired width
                                                height: 300 // Set desired height
                                            });

                                            // Convert the cropped canvas to a Blob
                                            canvas.toBlob(async (blob) => {
                                                const newFile = new File([blob], file.name, {
                                                    type: file.type,
                                                    lastModified: Date.now()
                                                });

                                                // Create a new FileReader to display the cropped image
                                                const newReader = new FileReader();
                                                newReader.onload = function (newEvent) {
                                                    const imgPreview = document.createElement('img');
                                                    imgPreview.src = newEvent.target.result;
                                                    imgPreview.className = 'cropped-image'; // Class for identification
                                                    imgPreview.style.width = '200px'; // Set a width for the preview
                                                    imgPreview.style.height = '200px'; // Set a fixed height for uniformity
                                                    previewContainer.appendChild(imgPreview);
                                                };

                                                newReader.readAsDataURL(newFile);
                                            }, file.type);
                                        });
                                    }
                                });
                            };

                            reader.readAsDataURL(file);
                        });
                    });
                </script>

                <script>
                    // Clear the message after 3 seconds
                    setTimeout(() => {
                        const messageField = document.getElementById('message');
                        if (messageField) {
                            messageField.value = ''; // Clear the message field
                        }
                    }, 2000); // Adjust the time (in milliseconds) as needed
                </script>
                <!-- Hidden field to track deleted images -->
                <input type="hidden" id="deletedImages" name="deletedImages" value="">

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-warning">Update Product</button>
                </div>
                </form>
            </div>
        </div>
    </div>
    </div>{{/each}}

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Attach event listeners when a modal is shown
            document.body.addEventListener('show.bs.modal', function (e) {
                const modal = e.target; // The modal that is being opened

                // Ensure the modal is of the product edit type
                if (modal.classList.contains('modal') && modal.id.startsWith('editProductModal')) {
                    deleteImageEvent(modal); // Pass the modal element to the function
                    if (!modal.hasAttribute('data-listener-attached')) {
                        handleImagePreview(modal); // Handle the image preview functionality for this modal
                        modal.setAttribute('data-listener-attached', 'true'); // Mark the modal as having the listener attached
                    }
                }
            });
        });

        function deleteImageEvent(modal) {
            const deleteButtons = modal.querySelectorAll('.delete-image-btn');

            deleteButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const imagePath = this.getAttribute('data-image');
                    const deletedImagesInput = modal.querySelector('input[name="deletedImages"]');

                    // Create a hidden input if it doesn't exist to store deleted image paths
                    if (!deletedImagesInput) {
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'deletedImages';
                        input.value = ''; // Initial empty value
                        modal.querySelector('form').appendChild(input); // Append to the form inside the modal
                    }

                    // Append the deleted image path to the hidden input
                    let currentDeletedImages = deletedImagesInput.value;
                    if (currentDeletedImages) {
                        currentDeletedImages += ',' + imagePath;
                    } else {
                        currentDeletedImages = imagePath;
                    }
                    deletedImagesInput.value = currentDeletedImages;

                    // Remove the image preview from the modal
                    this.closest('.position-relative').remove();
                });
            });
        }

        function handleImagePreview(modal) {
            const inputFile = modal.querySelector('input[type="file"]');
            const previewContainer = modal.querySelector('#existingImages');

            if (inputFile) {
                inputFile.addEventListener('change', function (e) {
                    // Clear the preview container before adding new images
                    previewContainer.innerHTML = '';

                    const files = e.target.files;
                    for (let file of files) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const imgElement = document.createElement('img');
                            imgElement.src = e.target.result;
                            imgElement.classList.add('img-thumbnail');
                            imgElement.style.width = '100px';
                            imgElement.style.height = 'auto';
                            previewContainer.appendChild(imgElement);
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }
        }

    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let cropper; // To store the cropper instance

            const inputImage = document.getElementById('inputImage');
            const imagePreview = document.getElementById('imagePreview');
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');
            const cropImageBtn = document.getElementById('cropImageBtn');

            inputImage.addEventListener('change', function (e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (event) {
                        imagePreview.src = event.target.result;
                        imagePreview.style.display = 'block';
                        imagePreviewContainer.style.display = 'block';

                        // If a cropper instance exists, destroy it before creating a new one
                        if (cropper) {
                            cropper.destroy();
                        }

                        // Initialize a new cropper
                        cropper = new Cropper(imagePreview, {
                            aspectRatio: 1, // Aspect ratio of 1:1 (square crop)
                            viewMode: 1,
                            autoCropArea: 0.65,
                            cropBoxResizable: true,
                            cropBoxMovable: true,
                        });

                        cropImageBtn.style.display = 'block'; // Show the "Crop Image" button
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Crop the image when the user clicks the "Crop Image" button
            cropImageBtn.addEventListener('click', function (e) {
                e.preventDefault(); // Prevents the modal from closing

                const canvas = cropper.getCroppedCanvas({
                    width: 300,
                    height: 300,
                });

                // Get the base64 image data from the canvas
                const croppedImage = canvas.toDataURL();

                // Display the cropped image in the preview container
                imagePreview.src = croppedImage;

                // Optionally, append this cropped image to the hidden input field to submit it with the form
                const hiddenInput = document.getElementById('croppedImageData');
                if (!hiddenInput) {
                    const newHiddenInput = document.createElement('input');
                    newHiddenInput.type = 'hidden';
                    newHiddenInput.id = 'croppedImageData';
                    newHiddenInput.name = 'croppedImageData';
                    newHiddenInput.value = croppedImage;
                    document.querySelector('form').appendChild(newHiddenInput);
                } else {
                    hiddenInput.value = croppedImage;
                }
            });

        });

    </script> 

  


  
  
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

</body>

</html>